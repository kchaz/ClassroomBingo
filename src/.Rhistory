)
}
#plot cumulative probability graph
plot_card_prob_trajectories(nrollsvec = nrollsvec,
mat = cum_mat,
cumulative = T,
initial_best_inds = initial_best_inds,
initial_best_cards = initial_best_cards,
legend_loc ="topleft")
#plot probability graph
cum_to_prob <- function(v){
n = length(v)
return(c(v[1], v[2:n] - v[seq_len(n-1)]))
}
prob_mat = apply(cum_mat, MARGIN = 2, cum_to_prob)
plot_card_prob_trajectories(nrollsvec = nrollsvec,
mat = prob_mat,
cumulative = F,
initial_best_inds = initial_best_inds,
initial_best_cards = initial_best_cards,
legend_loc = "topright")
### OLD STUFF
#' size of support of multinomial distribution, equal to n + p - 1 choose n
ncards = nsimplex(p = 5, n = 5)
x = c(0,0,2,2,1)
rep(c(2,3,4,5), each = x)
rep(c(2,3,4,5,6), each = x)
?rep
rep(c(1,2), each = c(2,3))
x
y = 2:6
sapply(y, rep, each = 2)
rep(0,2)
rep(1,0)
rep(1, times = 0)
x2u
?x2u
x2u(x)
x = c(0,0,2,2,1)
x2u(x)
x2u(x)+1
initial_best_cards
apply(initial_best_cards, 2, x2u)
a = cards[,1:2]
a
apply(a, 2, x2u)
apply(a, 2, x2u)+1
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/bingodiceproblem.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/bingodiceproblem.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/bingodiceproblem.R', echo=TRUE)
source(ClassroomBingoFunctions)
source(ClassroomBingoFunctions.R)
?source
source('ClassroomBingoFunctions.R')
setwd("~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo")
source('ClassroomBingoFunctions.R')
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
source('ClassroomBingoFunctions.R')
source('ClassroomBingoFunctions.R')
setwd("~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src")
source('ClassroomBingoFunctions.R')
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
?rep
colors
rep(c("red","blue","green"), length.out = 10)
rep(c("red","blue","green"), length.out = 2)
outcome_vec = c(2,3,4,5,6)
x = (0,0,2,2,1)
x = c(0,0,2,2,1)
x2u(x)
outcome_vec[x]
outcome_vec[x2u(x)]
m = matrix(c(0,0,2,2,1,0,2,0,3,0), ncol = 2)
m
apply(m, 2, x2u)
ind = apply(m, 2, x2u)
ind
outcome_vec
outcome_vec[ind]
function(inds){outcome_vec[ind]}
inds
inds
ind
apply(ind, 2, function(inds){outcome_vec[ind]})
apply(ind, 2, function(inds){outcome_vec[inds]})
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_OriginalSetup.R', echo=TRUE)
nsimplex
nsimplex(1,5)
nsimplex(5,1)
xsimplex(5,1)
xsimplex(1,5)
source('ClassroomBingo_RunSingleAnalysis.R')
source('~/Statistics_&_Math/_Stat_Notes/__Particular Problems/BingoDiceProblem/ClassroomBingo/src/ClassroomBingo_Main.R', echo=TRUE)
source('ClassroomBingo_RunSingleAnalysis.R')
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis <- function(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
{}
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as originally presented in signficance magazine
#' 5 possible outcomes to go on the bingo cards cards of size 5
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
probs <-  c(1,4,6,20,5)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
probs <-  rep(7.2,5)/36     # means those in same multinomial equivalence class have same probs
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#very extreme casse
probs <-  c(1,1,1,1,32)/36  #extreme case
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#sanity check - should get 0's and 1's
probs <-  c(0,0,0,0,36)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#sanity check - should get 0's and 1's
probs <-  c(0,0,0,36,0)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
test = get_all_bingo_cards(5, 5)
test
?sort
sort(test)
apply(test,2, sort)
sorted = apply(test, MARGIN = 2, FUN = sort)
sorted
?match
apply(sorted, 2, paste, collapse = "")
strings = apply(sorted, 2, paste, collapse = "")
strings
unique(strings)
t = "00005"
strings == t
inds = sapply(classes, function(c){c == strings})
classes = unique(strings)
inds = sapply(classes, function(c){c == strings})
inds
inds = lapply(classes, function(c){c == strings})
inds
?lapply
inds = lapply(classes, function(c){c == strings}, USE.NAMES = T)
inds = lapply(classes, FUN = function(c){c == strings}, USE.NAMES = T)
inds
inds = sapply(classes, FUN = function(c){c == strings}, USE.NAMES = T)
inds
inds = sapply(classes, FUN = function(c){as.numeric(c == strings)}, USE.NAMES = T)
inds
apply(inds, 1, sum)
test = get_all_bingo_cards(5, 5)
sorted = apply(test, MARGIN = 2, FUN = sort)
strings = apply(sorted, 2, paste, collapse = "")
classes = unique(strings)
inds = t(sapply(classes, FUN = function(c){as.numeric(c == strings)}, USE.NAMES = T))
inds
sorted
"abcde"[1,2,3]
c(a,b,c,d)[1,2,3]
c("a","b","c","d")[1,3,]
c("a","b","c","d")[1,3,4]
a:z
"a":"z"
letters(1)
?letters
letters[1]
letters[28]
max(cards)
length(letters)
strings = apply(sorted, 2, paste, collapse = ",")
strings
strings
sorted
letters[c(0,0,0,0,5)]
x2u(0,0,0,0,5)
x2u(c(0,0,0,0,5))
letters[x2u(c(0,0,0,0,5))]
apply(sorted, 2, function(col){letters[x2u(col)]}
)
sorted = apply(sorted, 2, function(col){letters[x2u(col)]})
strings = apply(sorted, 2, paste, collapse = ",")
strings
strings = apply(sorted, 2, paste, collapse = "")
strings
cards = get_all_bingo_cards(5, 5)
get_equivalence_class_mat <- function(cards){
#sort each column to get single representation of cards with same groupings (same number of doubles etc.)
sorted = apply(cards, MARGIN = 2, FUN = sort)
#if there are not more outcomes than the alphabet, convert to a letters representation that
#clearly distinguishes equivalence class rep from roll counts and bingo cards
if (ncols(cards) <= 26){
sorted = apply(sorted, 2, function(col){letters[x2u(col)]})
strings = apply(sorted, 2, paste, collapse = "")
} else {
strings = apply(sorted, 2, paste, collapse = ",") #add commas if using # rep
}
#identify the unique strings (equiv classes)
classes = unique(strings)
#get C x ncols(cards) matrix of 0's and 1's with 1's encoding which class each board belongs to
equiv_mat = t(sapply(classes, FUN = function(c){as.numeric(c == strings)}, USE.NAMES = T))
return(equiv_mat)
}
get_equivalence_class_mat(cards)
cards = get_all_bingo_cards(5, 5)
get_equivalence_class_mat <- function(cards){
#sort each column to get single representation of cards with same groupings (same number of doubles etc.)
sorted = apply(cards, MARGIN = 2, FUN = sort)
#if there are not more outcomes than the alphabet, convert to a letters representation that
#clearly distinguishes equivalence class rep from roll counts and bingo cards
if (ncol(cards) <= 26){
sorted = apply(sorted, 2, function(col){letters[x2u(col)]})
strings = apply(sorted, 2, paste, collapse = "")
} else {
strings = apply(sorted, 2, paste, collapse = ",") #add commas if using # rep
}
#identify the unique strings (equiv classes)
classes = unique(strings)
#get C x ncols(cards) matrix of 0's and 1's with 1's encoding which class each board belongs to
equiv_mat = t(sapply(classes, FUN = function(c){as.numeric(c == strings)}, USE.NAMES = T))
return(equiv_mat)
}
get_equivalence_class_mat(cards)
cards = get_all_bingo_cards(5, 5)
get_equivalence_class_mat <- function(cards){
#sort each column to get single representation of cards with same groupings (same number of doubles etc.)
sorted = apply(cards, MARGIN = 2, FUN = sort)
#if there are not more outcomes than the alphabet, convert to a letters representation that
#clearly distinguishes equivalence class rep from roll counts and bingo cards
if (nrow(cards) <= 26){
sorted = apply(sorted, 2, function(col){letters[x2u(col)]})
strings = apply(sorted, 2, paste, collapse = "")
} else {
strings = apply(sorted, 2, paste, collapse = ",") #add commas if using # rep
}
#identify the unique strings (equiv classes)
classes = unique(strings)
#get C x ncols(cards) matrix of 0's and 1's with 1's encoding which class each board belongs to
equiv_mat = t(sapply(classes, FUN = function(c){as.numeric(c == strings)}, USE.NAMES = T))
return(equiv_mat)
}
get_equivalence_class_mat(cards)
a = NULL
a == NULL
a
length(a)
is.null(a)
test = get_equivalence_class_mat(cards)
test
!T
labels(test)
rownames(test)
colors = c("blue","orange","green","purple","pink","cyan","red","black")
equiv_mat = test
colors = rep(colors, length.out = num_classes)
num_classes = nrow(equiv_mat)
colors = rep(colors, length.out = num_classes)
colors
equiv_mat
apply(equiv_mat, 2, function(c){colors[c]})
apply(equiv_mat, 2, function(c){colors[c]})
colors
colors[0]
colors[1]
where(c(0,0,0,1))
which(c(0,0,0,1))
get_equivalence_class_mat <- function(cards){
#sort each column to get single representation of cards with same groupings (same number of doubles etc.)
sorted = apply(cards, MARGIN = 2, FUN = sort)
#if there are not more outcomes than the alphabet, convert to a letters representation that
#clearly distinguishes equivalence class rep from roll counts and bingo cards
if (nrow(cards) <= 26){
sorted = apply(sorted, 2, function(col){letters[x2u(col)]})
strings = apply(sorted, 2, paste, collapse = "")
} else {
strings = apply(sorted, 2, paste, collapse = ",") #add commas if using # rep
}
#identify the unique strings (equiv classes)
classes = unique(strings)
#get C x ncols(cards) matrix of T and F with T's encoding which class each board belongs to
equiv_mat = t(sapply(classes, FUN = function(c){c == strings}, USE.NAMES = T))
return(equiv_mat)
}
equiv_mat = get_equivalence_class_mat(cards)
equiv_mat
apply(equiv_mat, 2, function(c){colors[c]})
source('ClassroomBingo_RunSingleAnalysis.R')
source('ClassroomBingo_RunSingleAnalysis.R')
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as originally presented in signficance magazine
#' 5 possible outcomes to go on the bingo cards cards of size 5
#' vary the probabilities of the outcomes
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
equiv_mat
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as originally presented in signficance magazine
#' 5 possible outcomes to go on the bingo cards cards of size 5
#' vary the probabilities of the outcomes
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
equiv_mat
labels = rownames(equiv_mat)
num_classes = length(labels)
colors
colors = rep(colors, length.out = num_classes)
colors
per_card_colors = apply(equiv_mat, 2, function(c){colors[c]})
per_card_colors
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as originally presented in signficance magazine
#' 5 possible outcomes to go on the bingo cards cards of size 5
#' vary the probabilities of the outcomes
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as originally presented in signficance magazine
#' 5 possible outcomes to go on the bingo cards cards of size 5
#' vary the probabilities of the outcomes
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as originally presented in signficance magazine
#' 5 possible outcomes to go on the bingo cards cards of size 5
#' vary the probabilities of the outcomes
#setup parameters
noutcomes = 5
card_size = 5
outcome_labels = 2:6
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#all same
probs <-  rep(7.2,5)/36     # means those in same multinomial equivalence class have same probs
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#very extreme casse
probs <-  c(1,1,1,32,1)/36  #extreme case
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#case with tie and switching dynamic where # of rolls matters
#maintains same order (5 is highest probability outcome) as original case
#for eaiser comparisons
probs <-  c(1,4,6,20,5)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#case with tie and switching dynamic where # of rolls matters
#maintains same order (5 is highest probability outcome) as original case
#for eaiser comparisons
probs <-  c(1,4,6,20,5)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
source('ClassroomBingo_RunSingleAnalysis.R')
source('ClassroomBingo_RunSingleAnalysis.R')
#' Run case as original
intains same order (5 is highest probability outcome) as original case
#for eaiser comparisons
probs <-  c(1,4,6,20,5)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#original problem probabilities
probs <- c(1,4,10,12,9)/36  #original problem, these are for dice sums 2,3,4,5,6
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
#case with tie and switching dynamic where # of rolls matters
#maintains same order (5 is highest probability outcome) as original case
#for eaiser comparisons
probs <-  c(1,4,6,20,5)/36
ClassroomBingoAnalysis(noutcomes = noutcomes,
probs = probs,
outcome_labels = outcome_labels,
card_size = card_size,
epsilon = 1e-8,
save_plots = F)
